//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGen.exe
//   Version: 1.0.0
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Extension Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UAP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGen - Invoke the following command with a valid 
//   Introspection XML file:
//     AllJoynCodeGen -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace allseen { namespace LSF {

// Methods
// Readable Properties
public ref class LampDetailsGetVersionRequestedEventArgs sealed
{
public:
    LampDetailsGetVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetVersionResult^ Result
    {
        LampDetailsGetVersionResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetVersionResult^>^ GetResultAsync(LampDetailsGetVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetVersionResult^ m_result;
};

public ref class LampDetailsGetMakeRequestedEventArgs sealed
{
public:
    LampDetailsGetMakeRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetMakeResult^ Result
    {
        LampDetailsGetMakeResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetMakeResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetMakeResult^>^ GetResultAsync(LampDetailsGetMakeRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetMakeResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetMakeResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetMakeResult^ m_result;
};

public ref class LampDetailsGetModelRequestedEventArgs sealed
{
public:
    LampDetailsGetModelRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetModelResult^ Result
    {
        LampDetailsGetModelResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetModelResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetModelResult^>^ GetResultAsync(LampDetailsGetModelRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetModelResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetModelResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetModelResult^ m_result;
};

public ref class LampDetailsGetTypeRequestedEventArgs sealed
{
public:
    LampDetailsGetTypeRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetTypeResult^ Result
    {
        LampDetailsGetTypeResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetTypeResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetTypeResult^>^ GetResultAsync(LampDetailsGetTypeRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetTypeResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetTypeResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetTypeResult^ m_result;
};

public ref class LampDetailsGetLampTypeRequestedEventArgs sealed
{
public:
    LampDetailsGetLampTypeRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetLampTypeResult^ Result
    {
        LampDetailsGetLampTypeResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetLampTypeResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetLampTypeResult^>^ GetResultAsync(LampDetailsGetLampTypeRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetLampTypeResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetLampTypeResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetLampTypeResult^ m_result;
};

public ref class LampDetailsGetLampBaseTypeRequestedEventArgs sealed
{
public:
    LampDetailsGetLampBaseTypeRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetLampBaseTypeResult^ Result
    {
        LampDetailsGetLampBaseTypeResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetLampBaseTypeResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetLampBaseTypeResult^>^ GetResultAsync(LampDetailsGetLampBaseTypeRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetLampBaseTypeResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetLampBaseTypeResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetLampBaseTypeResult^ m_result;
};

public ref class LampDetailsGetLampBeamAngleRequestedEventArgs sealed
{
public:
    LampDetailsGetLampBeamAngleRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetLampBeamAngleResult^ Result
    {
        LampDetailsGetLampBeamAngleResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetLampBeamAngleResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetLampBeamAngleResult^>^ GetResultAsync(LampDetailsGetLampBeamAngleRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetLampBeamAngleResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetLampBeamAngleResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetLampBeamAngleResult^ m_result;
};

public ref class LampDetailsGetDimmableRequestedEventArgs sealed
{
public:
    LampDetailsGetDimmableRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetDimmableResult^ Result
    {
        LampDetailsGetDimmableResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetDimmableResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetDimmableResult^>^ GetResultAsync(LampDetailsGetDimmableRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetDimmableResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetDimmableResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetDimmableResult^ m_result;
};

public ref class LampDetailsGetColorRequestedEventArgs sealed
{
public:
    LampDetailsGetColorRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetColorResult^ Result
    {
        LampDetailsGetColorResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetColorResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetColorResult^>^ GetResultAsync(LampDetailsGetColorRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetColorResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetColorResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetColorResult^ m_result;
};

public ref class LampDetailsGetVariableColorTempRequestedEventArgs sealed
{
public:
    LampDetailsGetVariableColorTempRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetVariableColorTempResult^ Result
    {
        LampDetailsGetVariableColorTempResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetVariableColorTempResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetVariableColorTempResult^>^ GetResultAsync(LampDetailsGetVariableColorTempRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetVariableColorTempResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetVariableColorTempResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetVariableColorTempResult^ m_result;
};

public ref class LampDetailsGetHasEffectsRequestedEventArgs sealed
{
public:
    LampDetailsGetHasEffectsRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetHasEffectsResult^ Result
    {
        LampDetailsGetHasEffectsResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetHasEffectsResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetHasEffectsResult^>^ GetResultAsync(LampDetailsGetHasEffectsRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetHasEffectsResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetHasEffectsResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetHasEffectsResult^ m_result;
};

public ref class LampDetailsGetMinVoltageRequestedEventArgs sealed
{
public:
    LampDetailsGetMinVoltageRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetMinVoltageResult^ Result
    {
        LampDetailsGetMinVoltageResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetMinVoltageResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetMinVoltageResult^>^ GetResultAsync(LampDetailsGetMinVoltageRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetMinVoltageResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetMinVoltageResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetMinVoltageResult^ m_result;
};

public ref class LampDetailsGetMaxVoltageRequestedEventArgs sealed
{
public:
    LampDetailsGetMaxVoltageRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetMaxVoltageResult^ Result
    {
        LampDetailsGetMaxVoltageResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetMaxVoltageResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetMaxVoltageResult^>^ GetResultAsync(LampDetailsGetMaxVoltageRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetMaxVoltageResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetMaxVoltageResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetMaxVoltageResult^ m_result;
};

public ref class LampDetailsGetWattageRequestedEventArgs sealed
{
public:
    LampDetailsGetWattageRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetWattageResult^ Result
    {
        LampDetailsGetWattageResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetWattageResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetWattageResult^>^ GetResultAsync(LampDetailsGetWattageRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetWattageResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetWattageResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetWattageResult^ m_result;
};

public ref class LampDetailsGetIncandescentEquivalentRequestedEventArgs sealed
{
public:
    LampDetailsGetIncandescentEquivalentRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetIncandescentEquivalentResult^ Result
    {
        LampDetailsGetIncandescentEquivalentResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetIncandescentEquivalentResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetIncandescentEquivalentResult^>^ GetResultAsync(LampDetailsGetIncandescentEquivalentRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetIncandescentEquivalentResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetIncandescentEquivalentResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetIncandescentEquivalentResult^ m_result;
};

public ref class LampDetailsGetMaxLumensRequestedEventArgs sealed
{
public:
    LampDetailsGetMaxLumensRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetMaxLumensResult^ Result
    {
        LampDetailsGetMaxLumensResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetMaxLumensResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetMaxLumensResult^>^ GetResultAsync(LampDetailsGetMaxLumensRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetMaxLumensResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetMaxLumensResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetMaxLumensResult^ m_result;
};

public ref class LampDetailsGetMinTemperatureRequestedEventArgs sealed
{
public:
    LampDetailsGetMinTemperatureRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetMinTemperatureResult^ Result
    {
        LampDetailsGetMinTemperatureResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetMinTemperatureResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetMinTemperatureResult^>^ GetResultAsync(LampDetailsGetMinTemperatureRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetMinTemperatureResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetMinTemperatureResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetMinTemperatureResult^ m_result;
};

public ref class LampDetailsGetMaxTemperatureRequestedEventArgs sealed
{
public:
    LampDetailsGetMaxTemperatureRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetMaxTemperatureResult^ Result
    {
        LampDetailsGetMaxTemperatureResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetMaxTemperatureResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetMaxTemperatureResult^>^ GetResultAsync(LampDetailsGetMaxTemperatureRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetMaxTemperatureResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetMaxTemperatureResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetMaxTemperatureResult^ m_result;
};

public ref class LampDetailsGetColorRenderingIndexRequestedEventArgs sealed
{
public:
    LampDetailsGetColorRenderingIndexRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetColorRenderingIndexResult^ Result
    {
        LampDetailsGetColorRenderingIndexResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetColorRenderingIndexResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetColorRenderingIndexResult^>^ GetResultAsync(LampDetailsGetColorRenderingIndexRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetColorRenderingIndexResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetColorRenderingIndexResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetColorRenderingIndexResult^ m_result;
};

public ref class LampDetailsGetLampIDRequestedEventArgs sealed
{
public:
    LampDetailsGetLampIDRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property LampDetailsGetLampIDResult^ Result
    {
        LampDetailsGetLampIDResult^ get() { return m_result; }
        void set(_In_ LampDetailsGetLampIDResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<LampDetailsGetLampIDResult^>^ GetResultAsync(LampDetailsGetLampIDRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<LampDetailsGetLampIDResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<LampDetailsGetLampIDResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    LampDetailsGetLampIDResult^ m_result;
};

// Writable Properties
} } } 
